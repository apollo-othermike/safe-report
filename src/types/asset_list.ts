/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Asset lists are a similar mechanism to allow frontends and other UIs to fetch metadata associated with Cosmos SDK denoms, especially for assets sent over IBC.
 * from: https://github.com/osmosis-labs/assetlists/blob/main/assetlist.schema.json
 */
export interface AssetLists {
  chain_id: string;
  assets: Asset[];
  [k: string]: unknown;
}
export interface Asset {
  /**
   * [OPTIONAL] A short description of the asset
   */
  description?: string;
  denom_units: DenomUnit[];
  /**
   * [OPTIONAL] The potential options for type of asset. By default, assumes sdk.coin
   */
  type_asset?: "sdk.coin" | "cw20" | "snip20" | "erc20";
  /**
   * [OPTIONAL] The address of the asset. Only required for type_asset : cw20, snip20
   */
  address?: string;
  /**
   * The base unit of the asset. Must be in denom_units.
   */
  base: string;
  /**
   * The project name of the asset. For example Bitcoin.
   */
  name: string;
  /**
   * The human friendly unit of the asset. Must be in denom_units.
   */
  display: string;
  /**
   * The symbol of an asset. For example BTC.
   */
  symbol: string;
  /**
   * [OPTIONAL] IBC Channel between src and dst between chain
   */
  ibc?: {
    source_channel: string;
    dst_channel: string;
    source_denom: string;
    [k: string]: unknown;
  };
  logo_URIs?: {
    png?: string;
    svg?: string;
    [k: string]: unknown;
  };
  /**
   * [OPTIONAL] The coingecko id to fetch asset data from coingecko v3 api. See https://api.coingecko.com/api/v3/coins/list
   */
  coingecko_id?: string;
  keywords?: string[];
  /**
   * [OPTIONAL] A list of primary Osmosis liquidity pools paired with various popular tokens.
   */
  pools?: {
    /**
     * The primary Osmosis liquidity pool containing this token paired with the OSMO token.
     */
    OSMO?: number;
    ATOM?: number;
    "USDC.axl"?: number;
    SCRT?: number;
    JUNO?: number;
    STARS?: number;
  };
  [k: string]: unknown;
}
export interface DenomUnit {
  denom: string;
  exponent: number;
  aliases?: string[];
  [k: string]: unknown;
}
